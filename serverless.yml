service: realworld

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

custom:
  handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''


package:
  exclude:
    - test/**
    - coverage/**
    - lambda-node-logo.png
    - .nyc_output/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:

  ## Users API
  createUser:
    handler: src/User${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true

  loginUser:
    handler: src/User${self:custom.handlerFilePostfix}.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true

  getUser:
    handler: src/User${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/user
          cors: true

  updateUser:
    handler: src/User${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/user
          cors: true

  getProfile:
    handler: src/User${self:custom.handlerFilePostfix}.getProfile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  followUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  unfollowUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  ## Articles API
  createArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true

  getArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true

  udpateArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true

  deleteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true

  favoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true

  unfavoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true

  listArticles:
    handler: src/Article${self:custom.handlerFilePostfix}.list
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true

  getArticlesFeed:
    handler: src/Article${self:custom.handlerFilePostfix}.getFeed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true

  getTags:
    handler: src/Article${self:custom.handlerFilePostfix}.getTags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true

  ## Comments API
  createComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  getComments:
    handler: src/Comment${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  deleteComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true

  ## Utils API
  ping:
    handler: src/Util${self:custom.handlerFilePostfix}.ping
    events:
      - http:
          method: GET
          path: /api/ping
          cors: true

  purgeData:
    handler: src/Util${self:custom.handlerFilePostfix}.purgeData
    events:
      - http: DELETE /api/__TESTUTILS__/purge

resources:
  Resources:

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          -
            IndexName: email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slug
            AttributeType: S
          -
            AttributeName: dummy
            AttributeType: S
          -
            AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          -
            AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles
        GlobalSecondaryIndexes:
          -
            IndexName: updatedAt
            KeySchema:
              -
                AttributeName: dummy
                KeyType: HASH
              -
                AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: slug
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          -
            IndexName: article
            KeySchema:
              -
                AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
