service: realworld

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    DEBUG_WATCHTOWER: 1
    PROFILE_WATCHTOWER: 1
    WT_RW_PROP_COUNT: ${env:WT_RW_PROP_COUNT}
  iamRoleStatements:
    - Effect: Allow             # Required for writing wt events
      Action:
        - 'kinesis:DescribeStream'
        - 'kinesis:PutRecord'
        - 'kinesis:PutRecords'
      Resource:
        Fn::GetAtt: [EventsStream, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

custom:
  # handlerFilePostfix: '-wrapper'
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}
  wtPathPrefix: "src/"

package:
  exclude:
    - test/**
    - coverage/**
    - lambda-node-logo.png
    - .nyc_output/**
    - .dynamodb/**
    - test-results/**
    - results*/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-step-functions

functions:

  ## Users API
  createUser:
    handler: src/User${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true


  loginUser:
    handler: src/User${self:custom.handlerFilePostfix}.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true


  getUser:
    handler: src/User${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/user
          cors: true


  updateUser:
    handler: src/User${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/user
          cors: true


  getProfile:
    handler: src/User${self:custom.handlerFilePostfix}.getProfile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  followUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  unfollowUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  ## Articles API
  createArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true

  getArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true

  udpateArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true

  deleteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true

  favoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true

  unfavoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true

  listArticles:
    handler: src/Article${self:custom.handlerFilePostfix}.list
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true

  getArticlesFeed:
    handler: src/Article${self:custom.handlerFilePostfix}.getFeed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true

  getTags:
    handler: src/Article${self:custom.handlerFilePostfix}.getTags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true

  ## Comments API
  createComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  getComments:
    handler: src/Comment${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  deleteComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true

  ## Utils API
  ping:
    handler: src/Util${self:custom.handlerFilePostfix}.ping
    events:
      - http:
          method: GET
          path: /api/ping
          cors: true

  purgeData:
    handler: src/Util${self:custom.handlerFilePostfix}.purgeData
    events:
      - http: DELETE /api/__TESTUTILS__/purge

  ## GDPR Consent API
  consent:
    handler: src/GDPR${self:custom.handlerFilePostfix}.consent
    events:
      - http:
          method: POST
          path: /api/consent
          cors: true

  revoke:
    handler: src/GDPR${self:custom.handlerFilePostfix}.revoke
    events:
      - http:
          method: DELETE
          path: /api/consent
          cors: true

  ########################################
  ## Watchtower Functions
  ##
  ##   Log Ingestion
  watchtower-ingestion: ${file(${self:custom.wtPathPrefix}watchtower/functions.yml):watchtower-ingestion}   # Event ingestion function
  watchtower-monitor:   ${file(${self:custom.wtPathPrefix}/watchtower/functions.yml):watchtower-monitor}     # Event monitor
  wt-monitor-trigger:   ${file(${self:custom.wtPathPrefix}/watchtower/functions.yml):wt-monitor-trigger}     # A function that triggers the event monitoring step-functions state machine



  ##########################################
  ## Watchtower Checker State Machine
  ##

stepFunctions:
  stateMachines:
    checker: ${file(${self:custom.wtPathPrefix}/watchtower/stateMachine.yml):stateMachines.checker}

  ##
  ## End of Watchtower Checker State Machine
  ##########################################


resources:
  Outputs:
    WTCheckerMachine: ${file(${self:custom.wtPathPrefix}/watchtower/outputs.yml):Outputs.WTCheckerMachine}
    WTEventsKinesisStream: ${file(${self:custom.wtPathPrefix}/watchtower/outputs.yml):Outputs.WTEventsKinesisStream}
    WTEventsKinesisStreamARN: ${file(${self:custom.wtPathPrefix}/watchtower/outputs.yml):Outputs.WTEventsKinesisStreamARN}

  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          -
            IndexName: email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slug
            AttributeType: S
          -
            AttributeName: dummy
            AttributeType: S
          -
            AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          -
            AttributeName: slug
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles
        GlobalSecondaryIndexes:
          -
            IndexName: updatedAt
            KeySchema:
              -
                AttributeName: dummy
                KeyType: HASH
              -
                AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: slug
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          -
            IndexName: article
            KeySchema:
              -
                AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    GDPRConsentDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-gdpr-consent

    ########################################
    ## Watchtower Resources
    ##

    EventsTable:          ${file(${self:custom.wtPathPrefix}/watchtower/ddbTables.yml):Resources.EventsTable}
    CheckpointsTable:     ${file(${self:custom.wtPathPrefix}/watchtower/ddbTables.yml):Resources.CheckpointsTable}
    InvocationStream:     ${file(${self:custom.wtPathPrefix}/watchtower/kinesisStreams.yml):Resources.InvocationStream}
    EventsStream:         ${file(${self:custom.wtPathPrefix}/watchtower/kinesisStreams.yml):Resources.EventsStream}
    EventWriterRole:      ${file(${self:custom.wtPathPrefix}/watchtower/iamRoles.yml):Resources.EventWriterRole}
    EventReaderRole:      ${file(${self:custom.wtPathPrefix}/watchtower/iamRoles.yml):Resources.EventReaderRole}
    StateMachineListExec: ${file(${self:custom.wtPathPrefix}/watchtower/iamRoles.yml):Resources.StateMachineListExec}

    ##
    ## END of Watchtower Resources
    ########################################
