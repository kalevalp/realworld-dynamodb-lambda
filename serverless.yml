service: realworld

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    # DEBUG_WATCHTOWER: 1
    PROFILE_WATCHTOWER: 1
    WT_RW_PROP_COUNT: ${env:WT_RW_PROP_COUNT}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

custom:
  # handlerFilePostfix: '-wrapper'
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}

package:
  exclude:
    - test/**
    - coverage/**
    - lambda-node-logo.png
    - .nyc_output/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-step-functions

functions:

  ## Users API
  createUser:
    handler: src/User${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]


  loginUser:
    handler: src/User${self:custom.handlerFilePostfix}.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]


  getUser:
    handler: src/User${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/user
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]


  updateUser:
    handler: src/User${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/user
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]


  getProfile:
    handler: src/User${self:custom.handlerFilePostfix}.getProfile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  followUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  unfollowUser:
    handler: src/User${self:custom.handlerFilePostfix}.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  ## Articles API
  createArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  getArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  udpateArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.update
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  deleteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  favoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  unfavoriteArticle:
    handler: src/Article${self:custom.handlerFilePostfix}.favorite
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  listArticles:
    handler: src/Article${self:custom.handlerFilePostfix}.list
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  getArticlesFeed:
    handler: src/Article${self:custom.handlerFilePostfix}.getFeed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  getTags:
    handler: src/Article${self:custom.handlerFilePostfix}.getTags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  ## Comments API
  createComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  getComments:
    handler: src/Comment${self:custom.handlerFilePostfix}.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  deleteComment:
    handler: src/Comment${self:custom.handlerFilePostfix}.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  ## Utils API
  ping:
    handler: src/Util${self:custom.handlerFilePostfix}.ping
    events:
      - http:
          method: GET
          path: /api/ping
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  purgeData:
    handler: src/Util${self:custom.handlerFilePostfix}.purgeData
    events:
      - http: DELETE /api/__TESTUTILS__/purge
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  ## GDPR Consent API
  consent:
    handler: src/GDPR${self:custom.handlerFilePostfix}.consent
    events:
      - http:
          method: POST
          path: /api/consent
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  revoke: 
    handler: src/GDPR${self:custom.handlerFilePostfix}.revoke
    events:
      - http:
          method: DELETE
          path: /api/consent
          cors: true
    role:
      'Fn::GetAtt': [ EventsStreamWriter, Arn ]

  ########################################
  ## Watchtower Functions
  ##
  ##   Log Ingestion
  watchtower-ingestion:
    handler: src/watchtower-log-ingestion.handler
    events:
      - stream:
          arn:
            'Fn::GetAtt': [ EventsStream, Arn ]
          type: kinesis
          enabled: true
          startingPosition: TRIM_HORIZON
    role:
      'Fn::GetAtt': [ EventWriterRole, Arn ]
    environment:
      WATCHTOWER_EVENT_TABLE:
        Ref: EventsTable
      WATCHTOWER_INVOCATION_STREAM:
        Ref: InvocationStream
      WATCHTOWER_PROPERTY_INSTANCE_TABLE:
        Ref: InstancesTable
  ##
  ##   Log Checker
  watchtower-monitor:
    handler: src/watchtower-monitor.handler
    # events:
    # - stream:
    #     arn:
    #       'Fn::GetAtt': [ InvocationStream, Arn ]
    #     type: kinesis
    #     enabled: true
    #     startingPosition: TRIM_HORIZON
    environment:
      WATCHTOWER_EVENT_TABLE:
        Ref: EventsTable
      WATCHTOWER_INVOCATION_STREAM:
        Ref: InvocationStream
      WATCHTOWER_PROPERTY_INSTANCE_TABLE:
        Ref: InstancesTable
      WATCHTOWER_CHECKPOINT_TABLE:
        Ref: CheckpointsTable
      PROCESSING_LAMBDA_TIMEOUT: 6
    role:
      'Fn::GetAtt': [ EventReaderRole, Arn ]
  ##
  ##   Monitor state machine trigger
  wt-monitor-trigger:
    handler: src/watchtower-monitor-trigger.handler
    events:
    - stream:
        arn:
          'Fn::GetAtt': [ InvocationStream, Arn ]
        type: kinesis
        enabled: true
        startingPosition: TRIM_HORIZON
    environment:
      WATCHTOWER_CHECKER_SM_ARN: ${self:resources.Outputs.WTCheckerMachine.Value}
    role:
      'Fn::GetAtt': [ StateMachineListExec, Arn ]
  ##
  ## END of Watchtower Functions
  ########################################

  ##########################################
  ## Watchtower Checker State Machine
  ##
stepFunctions:
  stateMachines:
    checker:
      name: wtCheckerMachine
      definition:
        Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: DetermineFlow
        States:
          DetermineFlow:
            Type: Choice
            Choices:
              - Variable: $.checkerFlow
                StringEquals: "runTwice"
                Next: PreFirstCheckerRun
              - Variable: $.checkerFlow
                StringEquals: "runOnce"
                Next: WaitToStable
            Default: WaitToStable
          PreFirstCheckerRun:
            Type: Pass
            Result: "initialPhase"
            ResultPath: $.phase
            Next: FirstCheckerRun
          FirstCheckerRun:
            Type: Task
            Comment: "First execution of the checker. May result in false positives and false negatives."
            Resource:
              Fn::GetAtt: [watchtower-monitor, Arn]
            Next: WaitToStable
          WaitToStable:
            Type : Wait
            SecondsPath : $.stabilityDelay
            Next: PreStableCheckerRun
          PreStableCheckerRun:
            Type: Pass
            Result: "stablePhase"
            ResultPath: $.phase
            Next: StableCheckerRun
          StableCheckerRun:
            Type: Task
            Comment: "Second/Stable execution of the checker."
            Resource:
              Fn::GetAtt: [watchtower-monitor, Arn]
            End: true
  ##
  ## End of Watchtower Checker State Machine
  ##########################################


resources:
  Outputs:
    WTCheckerMachine:
      Description: The ARN of the checker state machine
      Value:
        Ref: WtCheckerMachine # Note the capitalized first letter. Name in the step function declaration is wtCheckerMachine. This an AWS weirdness.
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST 
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          -
            IndexName: email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slug
            AttributeType: S
          -
            AttributeName: dummy
            AttributeType: S
          -
            AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          -
            AttributeName: slug
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST 
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles
        GlobalSecondaryIndexes:
          -
            IndexName: updatedAt
            KeySchema:
              -
                AttributeName: dummy
                KeyType: HASH
              -
                AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: slug
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          -
            IndexName: article
            KeySchema:
              -
                AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    GDPRConsentDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-gdpr-consent

    ########################################
    ## Watchtower Resources
    ##
    ##   Invocation Kinesis Stream
    InvocationStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: Watchtower${self:provider.stage}InvocationStream
        ShardCount: 10
    ##
    ##   Events Kinesis Stream
    EventsStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: Watchtower${self:provider.stage}EventsStream
        ShardCount: 25
    ##
    ##   Events DynamoDB Table
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: propinst
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: propinst
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: Watchtower-${self:provider.stage}-MonitoredEvents
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    ##
    ##   Property Instances DynamoDB Table
    InstancesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: propinst
          AttributeType: S
        - AttributeName: projinst
          AttributeType: S
        KeySchema:
        - AttributeName: propinst
          KeyType: HASH
        - AttributeName: projinst
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: Watchtower-${self:provider.stage}-PropertyInstances
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    ##
    ##   Instances Checkpoints DynamoDB Table
    CheckpointsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: propinst
          AttributeType: S
        KeySchema:
        - AttributeName: propinst
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: Watchtower-${self:provider.stage}-InstanceCheckpoints
    ##
    ##   Event-Writer IAM Role
    EventWriterRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventWriterRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: BatchWriteToEventTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:BatchWriteItem'
                 Resource:
                   Fn::GetAtt: [EventsTable, Arn]
    ##
    ## Event-Reader IAM Role
    EventReaderRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventReaderRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: QueryEventTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:Query'
                 Resource:
                   Fn::GetAtt: [EventsTable, Arn]
    #
    #   PropInstance-Writer IAM Role
    PropInstanceWriterRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}PropInstanceWriterRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: BatchWriteToPropInstanceTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:BatchWriteItem'
                 Resource:
                   Fn::GetAtt: [InstancesTable, Arn]
    # ##
    # ## EventPropInstance-Reader IAM Role
    # PropInstanceReaderRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}PropInstanceReaderRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: QueryEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:Query'
    #              Resource:
    #                Fn::GetAtt: [InstancesTable, Arn]
    # ##
    # ## Invocation Kinesis Stream Writer Role
    # InvocationStreamWriter:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}InvocationStreamWriter
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action: sts:AssumeRole
    #           Principal:
    #             Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #       - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: WriteToStream
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #             -  Effect: Allow
    #                Action:
    #                  - 'kinesis:DescribeStream'
    #                  - 'kinesis:PutRecord'
    #                  - 'kinesis:PutRecords'
    #                Resource:
    #                  Fn::GetAtt: [InvocationStream, Arn]
    ##
    ## Event Kinesis Stream Writer Role
    EventsStreamWriter:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventsStreamWriter
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: WriteToStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'kinesis:DescribeStream'
                     - 'kinesis:PutRecord'
                     - 'kinesis:PutRecords'
                   Resource:
                     Fn::GetAtt: [EventsStream, Arn]
    ##
    ## State Machine Operations Role
    StateMachineListExec:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}StateMachineListExec
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: ListAndExecuteSM
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'state:StartExecution'
                   Resource:
                     ${self:resources.Outputs.WTCheckerMachine.Value}


    ##
    ## END of Watchtower Resources
    ########################################

    # ########################################
    # ## Watchtower Resources
    # ##
    # ##   Invocation Kinesis Stream
    # InvocationStream:
    #   Type: 'AWS::Kinesis::Stream'
    #   Properties:
    #     Name: Watchtower${self:provider.stage}InvocationStream
    #     ShardCount: 10
    # ##
    # ##   Events DynamoDB Table 
    # EventsTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #     - AttributeName: propinst
    #       AttributeType: S
    #     - AttributeName: id
    #       AttributeType: S
    #     KeySchema:
    #     - AttributeName: propinst
    #       KeyType: HASH
    #     - AttributeName: id
    #       KeyType: RANGE
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5
    #     TableName: Watchtower-${self:provider.stage}-MonitoredEvents
    # ##
    # ##   Event-Writer IAM Role
    # EventWriterRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}EventWriterRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: BatchWriteToEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:BatchWriteItem'
    #              Resource:
    #                Fn::GetAtt: [EventsTable, Arn]
    # ##
    # ## Event-Reader IAM Role
    # EventReaderRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}EventReaderRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Action: sts:AssumeRole
    #         Principal:
    #           Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #     - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: QueryEventTable
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #           -  Effect: Allow
    #              Action:
    #              - 'dynamodb:Query'
    #              Resource:
    #                Fn::GetAtt: [EventsTable, Arn]
    # ## 
    # ## Invocation Kinesis Stream Writer Role
    # InvocationStreamWriter:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:provider.stage}InvocationStreamWriter
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action: sts:AssumeRole
    #           Principal:
    #             Service: lambda.amazonaws.com
    #     ManagedPolicyArns:
    #       - arn:aws:iam::aws:policy/AdministratorAccess
    #     Policies:
    #       - PolicyName: WriteToStream
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #             -  Effect: Allow
    #                Action:
    #                  - 'kinesis:DescribeStream'
    #                  - 'kinesis:PutRecord'
    #                  - 'kinesis:PutRecords'
    #                Resource:
    #                  Fn::GetAtt: [InvocationStream, Arn]
    # ##
    # ## END of Watchtower Resources
    # ########################################
